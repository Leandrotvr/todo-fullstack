Windows PowerShell
Copyright (C) Microsoft Corporation. Todos los derechos reservados.

Instale la versión más reciente de PowerShell para obtener nuevas características y mejoras. https://aka.ms/PSWindows

PS C:\Users\Leandro\Documents\todo-fullstack> # === RUTAS ===
PS C:\Users\Leandro\Documents\todo-fullstack> $ROOT = "C:\Users\Leandro\Documents\todo-fullstack"
PS C:\Users\Leandro\Documents\todo-fullstack> Set-Location $ROOT
PS C:\Users\Leandro\Documents\todo-fullstack>
PS C:\Users\Leandro\Documents\todo-fullstack> # 1) Dependencias de BD (pg para Postgres; better-sqlite3 para local/dev)
PS C:\Users\Leandro\Documents\todo-fullstack> npm install pg better-sqlite3

up to date, audited 143 packages in 3s

29 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities
PS C:\Users\Leandro\Documents\todo-fullstack>
PS C:\Users\Leandro\Documents\todo-fullstack> # 2) server.js: usa Postgres si hay DATABASE_URL; si no, SQLite. Fallback SPA compatible Express 5.
PS C:\Users\Leandro\Documents\todo-fullstack> @'
>> const express = require("express");
>> const cors = require("cors");
>> const path = require("path");
>>
>> const app = express();
>> app.use(cors());
>> app.use(express.json());
>>
>> // ===== DB: Postgres si hay DATABASE_URL; sino SQLite local =====
>> const usePg = !!process.env.DATABASE_URL;
>> let pool, db;
>>
>> (async () => {
>>   if (usePg) {
>>     const { Pool } = require("pg");
>>     pool = new Pool({
>>       connectionString: process.env.DATABASE_URL,
>>       ssl: { rejectUnauthorized: false },
>>     });
>>     await pool.query(`
>>       CREATE TABLE IF NOT EXISTS todos (
>>         id   SERIAL PRIMARY KEY,
>>         text TEXT    NOT NULL,
>>         done BOOLEAN NOT NULL DEFAULT false
>>       );
>>     `);
>>     console.log("DB: Postgres listo.");
>>   } else {
>>     const fs = require("fs");
>>     const Database = require("better-sqlite3");
>>     const localDbPath = path.join(__dirname, "data", "todos.db");
>>     fs.mkdirSync(path.dirname(localDbPath), { recursive: true });
>>     db = new Database(localDbPath);
>>     db.exec(`
>>       CREATE TABLE IF NOT EXISTS todos (
>>         id   INTEGER PRIMARY KEY AUTOINCREMENT,
>>         text TEXT    NOT NULL,
>>         done INTEGER NOT NULL DEFAULT 0
>>       );
>>     `);
>>     console.log("DB: SQLite local lista en", localDbPath);
>>   }
>> })().catch(err => {
>>   console.error("Error inicializando DB:", err);
>> });
>>
>> // ===== API =====
>> app.get("/api/todos", async (req, res) => {
>>   try {
>>     if (usePg) {
>>       const { rows } = await pool.query("SELECT id, text, done FROM todos ORDER BY id DESC");
>>       return res.json(rows);
>>     } else {
>>       const rows = db.prepare("SELECT id, text, done FROM todos ORDER BY id DESC").all()
>>         .map(r => ({ id: r.id, text: r.text, done: !!r.done }));
>>       return res.json(rows);
>>     }
>>   } catch (e) { res.status(500).json({ error: "db_get", detail: e.message }); }
>> });
>>
>> app.post("/api/todos", async (req, res) => {
>>   try {
>>     const text = (req.body?.text || "").toString().trim();
>>     if (!text) return res.status(400).json({ error: "text requerido" });
>>     if (usePg) {
>>       const { rows } = await pool.query(
>>         "INSERT INTO todos (text, done) VALUES ($1, false) RETURNING id, text, done",
>>         [text]
>>       );
>>       return res.json(rows[0]);
>>     } else {
>>       const info = db.prepare("INSERT INTO todos (text, done) VALUES (?, 0)").run(text);
>>       return res.json({ id: info.lastInsertRowid, text, done: false });
>>     }
>>   } catch (e) { res.status(500).json({ error: "db_post", detail: e.message }); }
>> });
>>
>> app.put("/api/todos/:id", async (req, res) => {
>>   try {
>>     const id = Number(req.params.id);
>>     if (usePg) {
>>       await pool.query("UPDATE todos SET done = NOT done WHERE id = $1", [id]);
>>     } else {
>>       db.prepare("UPDATE todos SET done = CASE WHEN done=1 THEN 0 ELSE 1 END WHERE id = ?").run(id);
>>     }
>>     res.json({ success: true });
>>   } catch (e) { res.status(500).json({ error: "db_put", detail: e.message }); }
>> });
>>
>> app.delete("/api/todos/:id", async (req, res) => {
>>   try {
>>     const id = Number(req.params.id);
>>     if (usePg) {
>>       await pool.query("DELETE FROM todos WHERE id = $1", [id]);
>>     } else {
>>       db.prepare("DELETE FROM todos WHERE id = ?").run(id);
>>     }
>>     res.json({ success: true });
>>   } catch (e) { res.status(500).json({ error: "db_delete", detail: e.message }); }
>> });
>>
>> // ===== FRONTEND build + fallback SPA (sin comodines) =====
>> const distPath = path.join(__dirname, "client", "dist");
>> app.use(express.static(distPath));
>> app.use((req, res, next) => {
>>   if (req.method === "GET" && !req.path.startsWith("/api")) {
>>     return res.sendFile(path.join(distPath, "index.html"));
>>   }
>>   next();
>> });
>>
>> const PORT = process.env.PORT || 4000;
>> app.listen(PORT, () =>
>>   console.log(`Servidor único en http://localhost:${PORT} (DB: ${usePg ? "Postgres" : "SQLite"})`)
>> );
>> '@ | Set-Content -Encoding UTF8 .\server.js
PS C:\Users\Leandro\Documents\todo-fullstack>
PS C:\Users\Leandro\Documents\todo-fullstack> # 3) (por si acaso) asegurar scripts/engine en package.json
PS C:\Users\Leandro\Documents\todo-fullstack> $json = Get-Content package.json -Raw | ConvertFrom-Json
PS C:\Users\Leandro\Documents\todo-fullstack> if (-not $json.PSObject.Properties['scripts']) { $json | Add-Member scripts ([pscustomobject]@{}) }
PS C:\Users\Leandro\Documents\todo-fullstack> ($json.scripts | Add-Member -Force server 'node server.js') > $null
PS C:\Users\Leandro\Documents\todo-fullstack> ($json.scripts | Add-Member -Force build  'cd client && npm install && npm run build') > $null
PS C:\Users\Leandro\Documents\todo-fullstack> ($json.scripts | Add-Member -Force start  'npm run build && npm run server') > $null
PS C:\Users\Leandro\Documents\todo-fullstack> if (-not $json.PSObject.Properties['engines']) { $json | Add-Member engines ([pscustomobject]@{}) }
PS C:\Users\Leandro\Documents\todo-fullstack> ($json.engines | Add-Member -Force node '>=18') > $null
PS C:\Users\Leandro\Documents\todo-fullstack> $json | ConvertTo-Json -Depth 10 | Set-Content package.json
PS C:\Users\Leandro\Documents\todo-fullstack>
PS C:\Users\Leandro\Documents\todo-fullstack> # 4) Compilar y push (Render autodeploy)
PS C:\Users\Leandro\Documents\todo-fullstack> npm run build

> todo-fullstack@1.0.0 build
> cd client && npm install && npm run build


up to date, audited 176 packages in 3s

39 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities

> client@0.0.0 build
> vite build

vite v7.1.4 building for production...
✓ 79 modules transformed.
dist/index.html                   0.46 kB │ gzip:  0.29 kB
dist/assets/index-CV6lvuN4.css    1.26 kB │ gzip:  0.60 kB
dist/assets/index-CQCB8xtB.js   228.71 kB │ gzip: 75.45 kB
✓ built in 7.07s
PS C:\Users\Leandro\Documents\todo-fullstack> git add .
warning: in the working copy of 'client/package-lock.json', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'server.js', LF will be replaced by CRLF the next time Git touches it
PS C:\Users\Leandro\Documents\todo-fullstack> git commit -m "feat: persistencia DB dual (Postgres via DATABASE_URL o SQLite local)" 2>$null
[main df46d33] feat: persistencia DB dual (Postgres via DATABASE_URL o SQLite local)
 2 files changed, 196 insertions(+), 1288 deletions(-)
PS C:\Users\Leandro\Documents\todo-fullstack> git push -u origin main
Enumerating objects: 7, done.
Counting objects: 100% (7/7), done.
Delta compression using up to 2 threads
Compressing objects: 100% (4/4), done.
Writing objects: 100% (4/4), 2.96 KiB | 758.00 KiB/s, done.
Total 4 (delta 3), reused 0 (delta 0), pack-reused 0 (from 0)
remote: Resolving deltas: 100% (3/3), completed with 3 local objects.
To https://github.com/Leandrotvr/todo-fullstack
   b516d12..df46d33  main -> main
branch 'main' set up to track 'origin/main'.
PS C:\Users\Leandro\Documents\todo-fullstack> # === RUTAS ===
PS C:\Users\Leandro\Documents\todo-fullstack> $ROOT = "C:\Users\Leandro\Documents\todo-fullstack"
PS C:\Users\Leandro\Documents\todo-fullstack> Set-Location $ROOT
PS C:\Users\Leandro\Documents\todo-fullstack>
PS C:\Users\Leandro\Documents\todo-fullstack> # 1) Dependencias de BD (pg para Postgres; better-sqlite3 para local/dev)
PS C:\Users\Leandro\Documents\todo-fullstack> npm install pg better-sqlite3

up to date, audited 143 packages in 5s

29 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities
PS C:\Users\Leandro\Documents\todo-fullstack>
PS C:\Users\Leandro\Documents\todo-fullstack> # 2) server.js: usa Postgres si hay DATABASE_URL; si no, SQLite. Fallback SPA compatible Express 5.
PS C:\Users\Leandro\Documents\todo-fullstack> @'
>> const express = require("express");
>> const cors = require("cors");
>> const path = require("path");
>>
>> const app = express();
>> app.use(cors());
>> app.use(express.json());
>>
>> // ===== DB: Postgres si hay DATABASE_URL; sino SQLite local =====
>> const usePg = !!process.env.DATABASE_URL;
>> let pool, db;
>>
>> (async () => {
>>   if (usePg) {
>>     const { Pool } = require("pg");
>>     pool = new Pool({
>>       connectionString: process.env.DATABASE_URL,
>>       ssl: { rejectUnauthorized: false },
>>     });
>>     await pool.query(`
>>       CREATE TABLE IF NOT EXISTS todos (
>>         id   SERIAL PRIMARY KEY,
>>         text TEXT    NOT NULL,
>>         done BOOLEAN NOT NULL DEFAULT false
>>       );
>>     `);
>>     console.log("DB: Postgres listo.");
>>   } else {
>>     const fs = require("fs");
>>     const Database = require("better-sqlite3");
>>     const localDbPath = path.join(__dirname, "data", "todos.db");
>>     fs.mkdirSync(path.dirname(localDbPath), { recursive: true });
>>     db = new Database(localDbPath);
>>     db.exec(`
>>       CREATE TABLE IF NOT EXISTS todos (
>>         id   INTEGER PRIMARY KEY AUTOINCREMENT,
>>         text TEXT    NOT NULL,
>>         done INTEGER NOT NULL DEFAULT 0
>>       );
>>     `);
>>     console.log("DB: SQLite local lista en", localDbPath);
>>   }
>> })().catch(err => {
>>   console.error("Error inicializando DB:", err);
>> });
>>
>> // ===== API =====
>> app.get("/api/todos", async (req, res) => {
>>   try {
>>     if (usePg) {
>>       const { rows } = await pool.query("SELECT id, text, done FROM todos ORDER BY id DESC");
>>       return res.json(rows);
>>     } else {
>>       const rows = db.prepare("SELECT id, text, done FROM todos ORDER BY id DESC").all()
>>         .map(r => ({ id: r.id, text: r.text, done: !!r.done }));
>>       return res.json(rows);
>>     }
>>   } catch (e) { res.status(500).json({ error: "db_get", detail: e.message }); }
>> });
>>
>> app.post("/api/todos", async (req, res) => {
>>   try {
>>     const text = (req.body?.text || "").toString().trim();
>>     if (!text) return res.status(400).json({ error: "text requerido" });
>>     if (usePg) {
>>       const { rows } = await pool.query(
>>         "INSERT INTO todos (text, done) VALUES ($1, false) RETURNING id, text, done",
>>         [text]
>>       );
>>       return res.json(rows[0]);
>>     } else {
>>       const info = db.prepare("INSERT INTO todos (text, done) VALUES (?, 0)").run(text);
>>       return res.json({ id: info.lastInsertRowid, text, done: false });
>>     }
>>   } catch (e) { res.status(500).json({ error: "db_post", detail: e.message }); }
>> });
>>
>> app.put("/api/todos/:id", async (req, res) => {
>>   try {
>>     const id = Number(req.params.id);
>>     if (usePg) {
>>       await pool.query("UPDATE todos SET done = NOT done WHERE id = $1", [id]);
>>     } else {
>>       db.prepare("UPDATE todos SET done = CASE WHEN done=1 THEN 0 ELSE 1 END WHERE id = ?").run(id);
>>     }
>>     res.json({ success: true });
>>   } catch (e) { res.status(500).json({ error: "db_put", detail: e.message }); }
>> });
>>
>> app.delete("/api/todos/:id", async (req, res) => {
>>   try {
>>     const id = Number(req.params.id);
>>     if (usePg) {
>>       await pool.query("DELETE FROM todos WHERE id = $1", [id]);
>>     } else {
>>       db.prepare("DELETE FROM todos WHERE id = ?").run(id);
>>     }
>>     res.json({ success: true });
>>   } catch (e) { res.status(500).json({ error: "db_delete", detail: e.message }); }
>> });
>>
>> // ===== FRONTEND build + fallback SPA (sin comodines) =====
>> const distPath = path.join(__dirname, "client", "dist");
>> app.use(express.static(distPath));
>> app.use((req, res, next) => {
>>   if (req.method === "GET" && !req.path.startsWith("/api")) {
>>     return res.sendFile(path.join(distPath, "index.html"));
>>   }
>>   next();
>> });
>>
>> const PORT = process.env.PORT || 4000;
>> app.listen(PORT, () =>
>>   console.log(`Servidor único en http://localhost:${PORT} (DB: ${usePg ? "Postgres" : "SQLite"})`)
>> );
>> '@ | Set-Content -Encoding UTF8 .\server.js
PS C:\Users\Leandro\Documents\todo-fullstack>
PS C:\Users\Leandro\Documents\todo-fullstack> # 3) (por si acaso) asegurar scripts/engine en package.json
PS C:\Users\Leandro\Documents\todo-fullstack> $json = Get-Content package.json -Raw | ConvertFrom-Json
PS C:\Users\Leandro\Documents\todo-fullstack> if (-not $json.PSObject.Properties['scripts']) { $json | Add-Member scripts ([pscustomobject]@{}) }
PS C:\Users\Leandro\Documents\todo-fullstack> ($json.scripts | Add-Member -Force server 'node server.js') > $null
PS C:\Users\Leandro\Documents\todo-fullstack> ($json.scripts | Add-Member -Force build  'cd client && npm install && npm run build') > $null
PS C:\Users\Leandro\Documents\todo-fullstack> ($json.scripts | Add-Member -Force start  'npm run build && npm run server') > $null
PS C:\Users\Leandro\Documents\todo-fullstack> if (-not $json.PSObject.Properties['engines']) { $json | Add-Member engines ([pscustomobject]@{}) }
PS C:\Users\Leandro\Documents\todo-fullstack> ($json.engines | Add-Member -Force node '>=18') > $null
PS C:\Users\Leandro\Documents\todo-fullstack> $json | ConvertTo-Json -Depth 10 | Set-Content package.json
PS C:\Users\Leandro\Documents\todo-fullstack>
PS C:\Users\Leandro\Documents\todo-fullstack> # 4) Compilar y push (Render autodeploy)
PS C:\Users\Leandro\Documents\todo-fullstack> npm run build

> todo-fullstack@1.0.0 build
> cd client && npm install && npm run build


up to date, audited 176 packages in 2s

39 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities

> client@0.0.0 build
> vite build

vite v7.1.4 building for production...
✓ 79 modules transformed.
dist/index.html                   0.46 kB │ gzip:  0.29 kB
dist/assets/index-CV6lvuN4.css    1.26 kB │ gzip:  0.60 kB
dist/assets/index-CQCB8xtB.js   228.71 kB │ gzip: 75.45 kB
✓ built in 3.85s
PS C:\Users\Leandro\Documents\todo-fullstack> git add .
warning: in the working copy of 'client/package-lock.json', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'server.js', LF will be replaced by CRLF the next time Git touches it
PS C:\Users\Leandro\Documents\todo-fullstack> git commit -m "feat: persistencia DB dual (Postgres via DATABASE_URL o SQLite local)" 2>$null
On branch main
Your branch is up to date with 'origin/main'.

nothing to commit, working tree clean
PS C:\Users\Leandro\Documents\todo-fullstack> git push -u origin main
branch 'main' set up to track 'origin/main'.
Everything up-to-date
PS C:\Users\Leandro\Documents\todo-fullstack>