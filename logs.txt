Windows PowerShell
Copyright (C) Microsoft Corporation. Todos los derechos reservados.

Instale la versión más reciente de PowerShell para obtener nuevas características y mejoras. https://aka.ms/PSWindows

PS C:\Users\Leandro\Documents\todo-fullstack> # === CONFIG ===
PS C:\Users\Leandro\Documents\todo-fullstack> $BASE = 'https://todo-fullstack-30wd.onrender.com'
PS C:\Users\Leandro\Documents\todo-fullstack> $API  = "$($BASE.TrimEnd('/'))/api/todos"
PS C:\Users\Leandro\Documents\todo-fullstack>
PS C:\Users\Leandro\Documents\todo-fullstack> # 1) Crear una tarea-marcador única
PS C:\Users\Leandro\Documents\todo-fullstack> $marker = "PG-PERSIST-TEST " + (Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
PS C:\Users\Leandro\Documents\todo-fullstack> $payload = @{ text = $marker } | ConvertTo-Json
PS C:\Users\Leandro\Documents\todo-fullstack> Invoke-RestMethod $API -Method POST -Body $payload -ContentType 'application/json' | Out-Null
PS C:\Users\Leandro\Documents\todo-fullstack> "`nMarcador creado: $marker`n"

Marcador creado: PG-PERSIST-TEST 2025-09-05 08:38:40

PS C:\Users\Leandro\Documents\todo-fullstack>
PS C:\Users\Leandro\Documents\todo-fullstack> # 2) Pausa para que hagas el redeploy en Render
PS C:\Users\Leandro\Documents\todo-fullstack> Read-Host ">>> En Render: Manual Deploy el servicio y esperá a que quede Live. Luego presioná ENTER acá para continuar"
>>> En Render: Manual Deploy el servicio y esperá a que quede Live. Luego presioná ENTER acá para continuar:

PS C:\Users\Leandro\Documents\todo-fullstack>
PS C:\Users\Leandro\Documents\todo-fullstack> # 3) Listar y verificar si persiste tras el reinicio
PS C:\Users\Leandro\Documents\todo-fullstack> $list = Invoke-RestMethod $API
PS C:\Users\Leandro\Documents\todo-fullstack> # Normalizar (array) por si PowerShell envuelve
PS C:\Users\Leandro\Documents\todo-fullstack> $items = if ($list -is [System.Array]) { $list } elseif ($list.PSObject.Properties.Name -contains 'value') { $list.value } else { @($list) }
PS C:\Users\Leandro\Documents\todo-fullstack> $exists = ($items | ForEach-Object { $_.text }) -contains $marker
PS C:\Users\Leandro\Documents\todo-fullstack>
PS C:\Users\Leandro\Documents\todo-fullstack> if ($exists) { "✅ Persistente (estás usando Postgres via DATABASE_URL)." }
✅ Persistente (estás usando Postgres via DATABASE_URL).
PS C:\Users\Leandro\Documents\todo-fullstack> else { "❌ NO persistente (contenedor efímero). Falta configurar DATABASE_URL en Render." }
else : El término 'else' no se reconoce como nombre de un cmdlet, función, archivo de script o programa ejecutable. Compruebe si escribió
correctamente el nombre o, si incluyó una ruta de acceso, compruebe que dicha ruta es correcta e inténtelo de nuevo.
En línea: 1 Carácter: 1
+ else { "❌ NO persistente (contenedor efímero). Falta configurar DATAB ...
+ ~~~~
    + CategoryInfo          : ObjectNotFound: (else:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\Users\Leandro\Documents\todo-fullstack> # === RUTAS ===
PS C:\Users\Leandro\Documents\todo-fullstack> $ROOT   = "C:\Users\Leandro\Documents\todo-fullstack"
PS C:\Users\Leandro\Documents\todo-fullstack> $SERVER = Join-Path $ROOT "server.js"
PS C:\Users\Leandro\Documents\todo-fullstack> $RENDER = Join-Path $ROOT "render.yaml"
PS C:\Users\Leandro\Documents\todo-fullstack>
PS C:\Users\Leandro\Documents\todo-fullstack> # 1) Ir a raíz e instalar middlewares de prod
PS C:\Users\Leandro\Documents\todo-fullstack> Set-Location $ROOT
PS C:\Users\Leandro\Documents\todo-fullstack> npm install compression helmet express-rate-limit

added 9 packages, and audited 152 packages in 6s

30 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities
PS C:\Users\Leandro\Documents\todo-fullstack>
PS C:\Users\Leandro\Documents\todo-fullstack> # 2) Reescribir server.js: seguridad, CORS por ALLOWED_ORIGIN, healthcheck y caché estática
PS C:\Users\Leandro\Documents\todo-fullstack> @'
>> const express = require("express");
>> const cors = require("cors");
>> const helmet = require("helmet");
>> const rateLimit = require("express-rate-limit");
>> const compression = require("compression");
>> const path = require("path");
>>
>> const app = express();
>> app.set("trust proxy", 1);              // necesario en Render para rate limit por IP
>> app.use(helmet({ crossOriginResourcePolicy: { policy: "cross-origin" } }));
>> app.use(compression());
>> app.use(express.json());
>>
>> // ===== CORS =====
>> const ALLOWED_ORIGIN = process.env.ALLOWED_ORIGIN; // si no existe, es dev/local
>> if (ALLOWED_ORIGIN && ALLOWED_ORIGIN !== "*") {
>>   app.use(cors({ origin: ALLOWED_ORIGIN, methods: ["GET","POST","PUT","PATCH","DELETE","OPTIONS"] }));
>> } else {
>>   app.use(cors()); // dev: abierto
>> }
>>
>> // ===== Rate limit solo para API =====
>> const limiter = rateLimit({ windowMs: 15 * 60 * 1000, max: 300, standardHeaders: true, legacyHeaders: false });
>> app.use("/api", limiter);
>>
>> // ===== DB: Postgres si hay DATABASE_URL; sino SQLite local =====
>> const usePg = !!process.env.DATABASE_URL;
>> let pool, db;
>>
>> (async () => {
>>   if (usePg) {
>>     const { Pool } = require("pg");
>>     pool = new Pool({
>>       connectionString: process.env.DATABASE_URL,
>>       ssl: { rejectUnauthorized: false },
>>     });
>>     await pool.query(`
>>       CREATE TABLE IF NOT EXISTS todos (
>>         id   SERIAL PRIMARY KEY,
>>         text TEXT    NOT NULL,
>>         done BOOLEAN NOT NULL DEFAULT false
>>       );
>>     `);
>>     console.log("DB: Postgres listo.");
>>   } else {
>>     const fs = require("fs");
>>     const Database = require("better-sqlite3");
>>     const localDbPath = path.join(__dirname, "data", "todos.db");
>>     fs.mkdirSync(path.dirname(localDbPath), { recursive: true });
>>     db = new Database(localDbPath);
>>     db.exec(`
>>       CREATE TABLE IF NOT EXISTS todos (
>>         id   INTEGER PRIMARY KEY AUTOINCREMENT,
>>         text TEXT    NOT NULL,
>>         done INTEGER NOT NULL DEFAULT 0
>>       );
>>     `);
>>     console.log("DB: SQLite local lista en", path.join(__dirname, "data", "todos.db"));
>>   }
>> })().catch(err => console.error("Error inicializando DB:", err));
>>
>> // ===== HEALTHCHECK =====
>> app.get("/health", async (req, res) => {
>>   try {
>>     if (usePg) { await pool.query("SELECT 1"); }
>>     else { db.prepare("SELECT 1").get(); }
>>     res.json({ ok: true, db: usePg ? "pg" : "sqlite" });
>>   } catch (e) {
>>     res.status(500).json({ ok: false, error: e.message });
>>   }
>> });
>>
>> // ===== API =====
>> app.get("/api/todos", async (req, res) => {
>>   try {
>>     if (usePg) {
>>       const { rows } = await pool.query("SELECT id, text, done FROM todos ORDER BY id DESC");
>>       return res.json(rows);
>>     }
>>     const rows = db.prepare("SELECT id, text, done FROM todos ORDER BY id DESC").all()
>>       .map(r => ({ id: r.id, text: r.text, done: !!r.done }));
>>     return res.json(rows);
>>   } catch (e) { res.status(500).json({ error: "db_get", detail: e.message }); }
>> });
>>
>> app.post("/api/todos", async (req, res) => {
>>   try {
>>     const text = (req.body?.text || "").toString().trim();
>>     if (!text) return res.status(400).json({ error: "text requerido" });
>>     if (usePg) {
>>       const { rows } = await pool.query("INSERT INTO todos (text, done) VALUES ($1, false) RETURNING id, text, done", [text]);
>>       return res.json(rows[0]);
>>     }
>>     const info = db.prepare("INSERT INTO todos (text, done) VALUES (?, 0)").run(text);
>>     return res.json({ id: info.lastInsertRowid, text, done: false });
>>   } catch (e) { res.status(500).json({ error: "db_post", detail: e.message }); }
>> });
>>
>> // Toggle done
>> app.put("/api/todos/:id", async (req, res) => {
>>   try {
>>     const id = Number(req.params.id);
>>     if (usePg) await pool.query("UPDATE todos SET done = NOT done WHERE id = $1", [id]);
>>     else db.prepare("UPDATE todos SET done = CASE WHEN done=1 THEN 0 ELSE 1 END WHERE id = ?").run(id);
>>     res.json({ success: true });
>>   } catch (e) { res.status(500).json({ error: "db_put_toggle", detail: e.message }); }
>> });
>>
>> // Editar texto
>> app.patch("/api/todos/:id", async (req, res) => {
>>   try {
>>     const id = Number(req.params.id);
>>     const text = (req.body?.text || "").toString().trim();
>>     if (!text) return res.status(400).json({ error: "text requerido" });
>>     if (usePg) {
>>       const { rows } = await pool.query("UPDATE todos SET text = $1 WHERE id = $2 RETURNING id, text, done", [text, id]);
>>       if (!rows.length) return res.status(404).json({ error: "not_found" });
>>       return res.json(rows[0]);
>>     } else {
>>       const r = db.prepare("UPDATE todos SET text = ? WHERE id = ?").run(text, id);
>>       if (!r.changes) return res.status(404).json({ error: "not_found" });
>>       const row = db.prepare("SELECT id, text, done FROM todos WHERE id = ?").get(id);
>>       return res.json({ id: row.id, text: row.text, done: !!row.done });
>>     }
>>   } catch (e) { res.status(500).json({ error: "db_patch_text", detail: e.message }); }
>> });
>>
>> // Borrar una
>> app.delete("/api/todos/:id", async (req, res) => {
>>   try {
>>     const id = Number(req.params.id);
>>     if (usePg) await pool.query("DELETE FROM todos WHERE id = $1", [id]);
>>     else db.prepare("DELETE FROM todos WHERE id = ?").run(id);
>>     res.json({ success: true });
>>   } catch (e) { res.status(500).json({ error: "db_delete_one", detail: e.message }); }
>> });
>>
>> // Borrar completadas
>> app.delete("/api/todos/completed", async (req, res) => {
>>   try {
>>     if (usePg) await pool.query("DELETE FROM todos WHERE done = TRUE");
>>     else db.prepare("DELETE FROM todos WHERE done = 1").run();
>>     res.json({ success: true });
>>   } catch (e) { res.status(500).json({ error: "db_delete_completed", detail: e.message }); }
>> });
>>
>> // ===== FRONTEND: estáticos + caché =====
>> const distPath = path.join(__dirname, "client", "dist");
>> // Cache agresiva para assets con hash; no-cache para index.html
>> app.use(express.static(distPath, {
>>   maxAge: "1y",
>>   setHeaders: (res, p) => {
>>     if (p.endsWith("index.html")) {
>>       res.setHeader("Cache-Control", "no-cache");
>>     } else if (p.includes(`${path.sep}assets${path.sep}`)) {
>>       res.setHeader("Cache-Control", "public, max-age=31536000, immutable");
>>     }
>>   }
>> }));
>>
>> // Fallback SPA compatible con Express 5 (sin wildcard)
>> app.use((req, res, next) => {
>>   if (req.method === "GET" && !req.path.startsWith("/api")) {
>>     return res.sendFile(path.join(distPath, "index.html"));
>>   }
>>   next();
>> });
>>
>> const PORT = process.env.PORT || 4000;
>> app.listen(PORT, () =>
>>   console.log(`Servidor único en http://localhost:${PORT} (DB: ${usePg ? "Postgres" : "SQLite"})`)
>> );
>> '@ | Set-Content -Encoding UTF8 $SERVER
PS C:\Users\Leandro\Documents\todo-fullstack>
PS C:\Users\Leandro\Documents\todo-fullstack> # 3) Actualizar render.yaml: ALLOWED_ORIGIN + healthCheckPath
PS C:\Users\Leandro\Documents\todo-fullstack> @'
>> services:
>>   - type: web
>>     name: todo-fullstack
>>     env: node
>>     plan: free
>>     buildCommand: npm install && npm run build
>>     startCommand: npm run server
>>     healthCheckPath: /health
>>     autoDeploy: true
>>     envVars:
>>       - key: ALLOWED_ORIGIN
>>         value: https://todo-fullstack-30wd.onrender.com
>> '@ | Set-Content -Encoding UTF8 $RENDER
PS C:\Users\Leandro\Documents\todo-fullstack>
PS C:\Users\Leandro\Documents\todo-fullstack> # 4) Compilar y push (Render autodeploy por Blueprint)
PS C:\Users\Leandro\Documents\todo-fullstack> npm run build

> todo-fullstack@1.0.0 build
> cd client && npm install && npm run build


up to date, audited 176 packages in 2s

39 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities

> client@0.0.0 build
> vite build

vite v7.1.4 building for production...
✓ 79 modules transformed.
dist/index.html                   0.46 kB │ gzip:  0.30 kB
dist/assets/index-CV6lvuN4.css    1.26 kB │ gzip:  0.60 kB
dist/assets/index-Dx7w1ZYq.js   230.70 kB │ gzip: 76.01 kB
✓ built in 4.25s
PS C:\Users\Leandro\Documents\todo-fullstack> git add .
warning: in the working copy of 'client/package-lock.json', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'render.yaml', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'server.js', LF will be replaced by CRLF the next time Git touches it
PS C:\Users\Leandro\Documents\todo-fullstack> git commit -m "chore: seguridad (helmet+rate-limit), CORS por ALLOWED_ORIGIN, /health y caché estática" 2>$null
[main c52b8b5] chore: seguridad (helmet+rate-limit), CORS por ALLOWED_ORIGIN, /health y caché estática
 5 files changed, 637 insertions(+), 40 deletions(-)
PS C:\Users\Leandro\Documents\todo-fullstack> git push -u origin main
Enumerating objects: 13, done.
Counting objects: 100% (13/13), done.
Delta compression using up to 2 threads
Compressing objects: 100% (7/7), done.
Writing objects: 100% (7/7), 10.03 KiB | 933.00 KiB/s, done.
Total 7 (delta 2), reused 0 (delta 0), pack-reused 0 (from 0)
remote: Resolving deltas: 100% (2/2), completed with 2 local objects.
To https://github.com/Leandrotvr/todo-fullstack
   368e440..c52b8b5  main -> main
branch 'main' set up to track 'origin/main'.
PS C:\Users\Leandro\Documents\todo-fullstack> # === RUTAS ===
PS C:\Users\Leandro\Documents\todo-fullstack> $ROOT   = "C:\Users\Leandro\Documents\todo-fullstack"
PS C:\Users\Leandro\Documents\todo-fullstack> $SERVER = Join-Path $ROOT "server.js"
PS C:\Users\Leandro\Documents\todo-fullstack> $RENDER = Join-Path $ROOT "render.yaml"
PS C:\Users\Leandro\Documents\todo-fullstack>
PS C:\Users\Leandro\Documents\todo-fullstack> # 1) Ir a raíz e instalar middlewares de prod
PS C:\Users\Leandro\Documents\todo-fullstack> Set-Location $ROOT
PS C:\Users\Leandro\Documents\todo-fullstack> npm install compression helmet express-rate-limit

up to date, audited 152 packages in 3s

30 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities
PS C:\Users\Leandro\Documents\todo-fullstack>
PS C:\Users\Leandro\Documents\todo-fullstack> # 2) Reescribir server.js: seguridad, CORS por ALLOWED_ORIGIN, healthcheck y caché estática
PS C:\Users\Leandro\Documents\todo-fullstack> @'
>> const express = require("express");
>> const cors = require("cors");
>> const helmet = require("helmet");
>> const rateLimit = require("express-rate-limit");
>> const compression = require("compression");
>> const path = require("path");
>>
>> const app = express();
>> app.set("trust proxy", 1);              // necesario en Render para rate limit por IP
>> app.use(helmet({ crossOriginResourcePolicy: { policy: "cross-origin" } }));
>> app.use(compression());
>> app.use(express.json());
>>
>> // ===== CORS =====
>> const ALLOWED_ORIGIN = process.env.ALLOWED_ORIGIN; // si no existe, es dev/local
>> if (ALLOWED_ORIGIN && ALLOWED_ORIGIN !== "*") {
>>   app.use(cors({ origin: ALLOWED_ORIGIN, methods: ["GET","POST","PUT","PATCH","DELETE","OPTIONS"] }));
>> } else {
>>   app.use(cors()); // dev: abierto
>> }
>>
>> // ===== Rate limit solo para API =====
>> const limiter = rateLimit({ windowMs: 15 * 60 * 1000, max: 300, standardHeaders: true, legacyHeaders: false });
>> app.use("/api", limiter);
>>
>> // ===== DB: Postgres si hay DATABASE_URL; sino SQLite local =====
>> const usePg = !!process.env.DATABASE_URL;
>> let pool, db;
>>
>> (async () => {
>>   if (usePg) {
>>     const { Pool } = require("pg");
>>     pool = new Pool({
>>       connectionString: process.env.DATABASE_URL,
>>       ssl: { rejectUnauthorized: false },
>>     });
>>     await pool.query(`
>>       CREATE TABLE IF NOT EXISTS todos (
>>         id   SERIAL PRIMARY KEY,
>>         text TEXT    NOT NULL,
>>         done BOOLEAN NOT NULL DEFAULT false
>>       );
>>     `);
>>     console.log("DB: Postgres listo.");
>>   } else {
>>     const fs = require("fs");
>>     const Database = require("better-sqlite3");
>>     const localDbPath = path.join(__dirname, "data", "todos.db");
>>     fs.mkdirSync(path.dirname(localDbPath), { recursive: true });
>>     db = new Database(localDbPath);
>>     db.exec(`
>>       CREATE TABLE IF NOT EXISTS todos (
>>         id   INTEGER PRIMARY KEY AUTOINCREMENT,
>>         text TEXT    NOT NULL,
>>         done INTEGER NOT NULL DEFAULT 0
>>       );
>>     `);
>>     console.log("DB: SQLite local lista en", path.join(__dirname, "data", "todos.db"));
>>   }
>> })().catch(err => console.error("Error inicializando DB:", err));
>>
>> // ===== HEALTHCHECK =====
>> app.get("/health", async (req, res) => {
>>   try {
>>     if (usePg) { await pool.query("SELECT 1"); }
>>     else { db.prepare("SELECT 1").get(); }
>>     res.json({ ok: true, db: usePg ? "pg" : "sqlite" });
>>   } catch (e) {
>>     res.status(500).json({ ok: false, error: e.message });
>>   }
>> });
>>
>> // ===== API =====
>> app.get("/api/todos", async (req, res) => {
>>   try {
>>     if (usePg) {
>>       const { rows } = await pool.query("SELECT id, text, done FROM todos ORDER BY id DESC");
>>       return res.json(rows);
>>     }
>>     const rows = db.prepare("SELECT id, text, done FROM todos ORDER BY id DESC").all()
>>       .map(r => ({ id: r.id, text: r.text, done: !!r.done }));
>>     return res.json(rows);
>>   } catch (e) { res.status(500).json({ error: "db_get", detail: e.message }); }
>> });
>>
>> app.post("/api/todos", async (req, res) => {
>>   try {
>>     const text = (req.body?.text || "").toString().trim();
>>     if (!text) return res.status(400).json({ error: "text requerido" });
>>     if (usePg) {
>>       const { rows } = await pool.query("INSERT INTO todos (text, done) VALUES ($1, false) RETURNING id, text, done", [text]);
>>       return res.json(rows[0]);
>>     }
>>     const info = db.prepare("INSERT INTO todos (text, done) VALUES (?, 0)").run(text);
>>     return res.json({ id: info.lastInsertRowid, text, done: false });
>>   } catch (e) { res.status(500).json({ error: "db_post", detail: e.message }); }
>> });
>>
>> // Toggle done
>> app.put("/api/todos/:id", async (req, res) => {
>>   try {
>>     const id = Number(req.params.id);
>>     if (usePg) await pool.query("UPDATE todos SET done = NOT done WHERE id = $1", [id]);
>>     else db.prepare("UPDATE todos SET done = CASE WHEN done=1 THEN 0 ELSE 1 END WHERE id = ?").run(id);
>>     res.json({ success: true });
>>   } catch (e) { res.status(500).json({ error: "db_put_toggle", detail: e.message }); }
>> });
>>
>> // Editar texto
>> app.patch("/api/todos/:id", async (req, res) => {
>>   try {
>>     const id = Number(req.params.id);
>>     const text = (req.body?.text || "").toString().trim();
>>     if (!text) return res.status(400).json({ error: "text requerido" });
>>     if (usePg) {
>>       const { rows } = await pool.query("UPDATE todos SET text = $1 WHERE id = $2 RETURNING id, text, done", [text, id]);
>>       if (!rows.length) return res.status(404).json({ error: "not_found" });
>>       return res.json(rows[0]);
>>     } else {
>>       const r = db.prepare("UPDATE todos SET text = ? WHERE id = ?").run(text, id);
>>       if (!r.changes) return res.status(404).json({ error: "not_found" });
>>       const row = db.prepare("SELECT id, text, done FROM todos WHERE id = ?").get(id);
>>       return res.json({ id: row.id, text: row.text, done: !!row.done });
>>     }
>>   } catch (e) { res.status(500).json({ error: "db_patch_text", detail: e.message }); }
>> });
>>
>> // Borrar una
>> app.delete("/api/todos/:id", async (req, res) => {
>>   try {
>>     const id = Number(req.params.id);
>>     if (usePg) await pool.query("DELETE FROM todos WHERE id = $1", [id]);
>>     else db.prepare("DELETE FROM todos WHERE id = ?").run(id);
>>     res.json({ success: true });
>>   } catch (e) { res.status(500).json({ error: "db_delete_one", detail: e.message }); }
>> });
>>
>> // Borrar completadas
>> app.delete("/api/todos/completed", async (req, res) => {
>>   try {
>>     if (usePg) await pool.query("DELETE FROM todos WHERE done = TRUE");
>>     else db.prepare("DELETE FROM todos WHERE done = 1").run();
>>     res.json({ success: true });
>>   } catch (e) { res.status(500).json({ error: "db_delete_completed", detail: e.message }); }
>> });
>>
>> // ===== FRONTEND: estáticos + caché =====
>> const distPath = path.join(__dirname, "client", "dist");
>> // Cache agresiva para assets con hash; no-cache para index.html
>> app.use(express.static(distPath, {
>>   maxAge: "1y",
>>   setHeaders: (res, p) => {
>>     if (p.endsWith("index.html")) {
>>       res.setHeader("Cache-Control", "no-cache");
>>     } else if (p.includes(`${path.sep}assets${path.sep}`)) {
>>       res.setHeader("Cache-Control", "public, max-age=31536000, immutable");
>>     }
>>   }
>> }));
>>
>> // Fallback SPA compatible con Express 5 (sin wildcard)
>> app.use((req, res, next) => {
>>   if (req.method === "GET" && !req.path.startsWith("/api")) {
>>     return res.sendFile(path.join(distPath, "index.html"));
>>   }
>>   next();
>> });
>>
>> const PORT = process.env.PORT || 4000;
>> app.listen(PORT, () =>
>>   console.log(`Servidor único en http://localhost:${PORT} (DB: ${usePg ? "Postgres" : "SQLite"})`)
>> );
>> '@ | Set-Content -Encoding UTF8 $SERVER
PS C:\Users\Leandro\Documents\todo-fullstack>
PS C:\Users\Leandro\Documents\todo-fullstack> # 3) Actualizar render.yaml: ALLOWED_ORIGIN + healthCheckPath
PS C:\Users\Leandro\Documents\todo-fullstack> @'
>> services:
>>   - type: web
>>     name: todo-fullstack
>>     env: node
>>     plan: free
>>     buildCommand: npm install && npm run build
>>     startCommand: npm run server
>>     healthCheckPath: /health
>>     autoDeploy: true
>>     envVars:
>>       - key: ALLOWED_ORIGIN
>>         value: https://todo-fullstack-30wd.onrender.com
>> '@ | Set-Content -Encoding UTF8 $RENDER
PS C:\Users\Leandro\Documents\todo-fullstack>
PS C:\Users\Leandro\Documents\todo-fullstack> # 4) Compilar y push (Render autodeploy por Blueprint)
PS C:\Users\Leandro\Documents\todo-fullstack> npm run build

> todo-fullstack@1.0.0 build
> cd client && npm install && npm run build


up to date, audited 176 packages in 4s

39 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities

> client@0.0.0 build
> vite build

vite v7.1.4 building for production...
✓ 79 modules transformed.
dist/index.html                   0.46 kB │ gzip:  0.30 kB
dist/assets/index-CV6lvuN4.css    1.26 kB │ gzip:  0.60 kB
dist/assets/index-Dx7w1ZYq.js   230.70 kB │ gzip: 76.01 kB
✓ built in 4.75s
PS C:\Users\Leandro\Documents\todo-fullstack> git add .
warning: in the working copy of 'client/package-lock.json', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'render.yaml', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'server.js', LF will be replaced by CRLF the next time Git touches it
PS C:\Users\Leandro\Documents\todo-fullstack> git commit -m "chore: seguridad (helmet+rate-limit), CORS por ALLOWED_ORIGIN, /health y caché estática" 2>$null
[main 683bda6] chore: seguridad (helmet+rate-limit), CORS por ALLOWED_ORIGIN, /health y caché estática
 1 file changed, 206 insertions(+), 722 deletions(-)
PS C:\Users\Leandro\Documents\todo-fullstack> git push -u origin main
Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 2 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 2.11 KiB | 718.00 KiB/s, done.
Total 3 (delta 2), reused 0 (delta 0), pack-reused 0 (from 0)
remote: Resolving deltas: 100% (2/2), completed with 2 local objects.
To https://github.com/Leandrotvr/todo-fullstack
   c52b8b5..683bda6  main -> main
branch 'main' set up to track 'origin/main'.
PS C:\Users\Leandro\Documents\todo-fullstack> # === RUTAS ===
PS C:\Users\Leandro\Documents\todo-fullstack> $ROOT   = "C:\Users\Leandro\Documents\todo-fullstack"
PS C:\Users\Leandro\Documents\todo-fullstack> $SERVER = Join-Path $ROOT "server.js"
PS C:\Users\Leandro\Documents\todo-fullstack> $CLIENT = Join-Path $ROOT "client"
PS C:\Users\Leandro\Documents\todo-fullstack> $APP    = Join-Path $CLIENT "src\App.jsx"
PS C:\Users\Leandro\Documents\todo-fullstack>
PS C:\Users\Leandro\Documents\todo-fullstack> # 1) --- BACKEND: agregar columna 'ord', usarla en GET/POST y nuevo endpoint PATCH /api/todos/reorder ---
PS C:\Users\Leandro\Documents\todo-fullstack> Set-Location $ROOT
PS C:\Users\Leandro\Documents\todo-fullstack> @'
>> const express = require("express");
>> const cors = require("cors");
>> const helmet = require("helmet");
>> const rateLimit = require("express-rate-limit");
>> const compression = require("compression");
>> const path = require("path");
>>
>> const app = express();
>> app.set("trust proxy", 1);
>> app.use(helmet({ crossOriginResourcePolicy: { policy: "cross-origin" } }));
>> app.use(compression());
>> app.use(express.json());
>>
>> // ===== CORS =====
>> const ALLOWED_ORIGIN = process.env.ALLOWED_ORIGIN;
>> if (ALLOWED_ORIGIN && ALLOWED_ORIGIN !== "*") {
>>   app.use(cors({ origin: ALLOWED_ORIGIN, methods: ["GET","POST","PUT","PATCH","DELETE","OPTIONS"] }));
>> } else {
>>   app.use(cors()); // dev
>> }
>>
>> // ===== Rate limit solo para API =====
>> const limiter = rateLimit({ windowMs: 15 * 60 * 1000, max: 300, standardHeaders: true, legacyHeaders: false });
>> app.use("/api", limiter);
>>
>> // ===== DB: Postgres si hay DATABASE_URL; sino SQLite local =====
>> const usePg = !!process.env.DATABASE_URL;
>> let pool, db;
>>
>> (async () => {
>>   if (usePg) {
>>     const { Pool } = require("pg");
>>     pool = new Pool({
>>       connectionString: process.env.DATABASE_URL,
>>       ssl: { rejectUnauthorized: false },
>>     });
>>     await pool.query(`
>>       CREATE TABLE IF NOT EXISTS todos (
>>         id   SERIAL PRIMARY KEY,
>>         text TEXT    NOT NULL,
>>         done BOOLEAN NOT NULL DEFAULT false,
>>         ord  INTEGER
>>       );
>>     `);
>>     // Asegurar 'ord' poblado
>>     await pool.query(`
>>       WITH ranked AS (
>>         SELECT id, ROW_NUMBER() OVER (ORDER BY COALESCE(ord, 2147483647), id) AS rn
>>         FROM todos
>>       )
>>       UPDATE todos t SET ord = ranked.rn
>>       FROM ranked WHERE ranked.id = t.id AND (t.ord IS NULL OR t.ord < 1);
>>     `);
>>     console.log("DB: Postgres listo.");
>>   } else {
>>     const fs = require("fs");
>>     const Database = require("better-sqlite3");
>>     const localDbPath = path.join(__dirname, "data", "todos.db");
>>     fs.mkdirSync(path.dirname(localDbPath), { recursive: true });
>>     db = new Database(localDbPath);
>>     db.exec(`
>>       CREATE TABLE IF NOT EXISTS todos (
>>         id   INTEGER PRIMARY KEY AUTOINCREMENT,
>>         text TEXT    NOT NULL,
>>         done INTEGER NOT NULL DEFAULT 0,
>>         ord  INTEGER
>>       );
>>     `);
>>     // Asegurar 'ord' poblado
>>     const rows = db.prepare("SELECT id, ord FROM todos ORDER BY COALESCE(ord, 99999999), id").all();
>>     const tx = db.transaction((items) => {
>>       const upd = db.prepare("UPDATE todos SET ord = ? WHERE id = ?");
>>       let i = 1;
>>       for (const r of items) { if (!r.ord || r.ord < 1) upd.run(i++, r.id); }
>>     });
>>     tx(rows);
>>     console.log("DB: SQLite local lista en", path.join(__dirname, "data", "todos.db"));
>>   }
>> })().catch(err => console.error("Error inicializando DB:", err));
>>
>> // ===== HEALTHCHECK =====
>> app.get("/health", async (req, res) => {
>>   try {
>>     if (usePg) { await pool.query("SELECT 1"); }
>>     else { db.prepare("SELECT 1").get(); }
>>     res.json({ ok: true, db: usePg ? "pg" : "sqlite" });
>>   } catch (e) {
>>     res.status(500).json({ ok: false, error: e.message });
>>   }
>> });
>>
>> // ===== API =====
>> app.get("/api/todos", async (req, res) => {
>>   try {
>>     if (usePg) {
>>       const { rows } = await pool.query("SELECT id, text, done, ord FROM todos ORDER BY ord ASC, id ASC");
>>       return res.json(rows);
>>     }
>>     const rows = db.prepare("SELECT id, text, done, ord FROM todos ORDER BY ord ASC, id ASC").all()
>>       .map(r => ({ id: r.id, text: r.text, done: !!r.done, ord: r.ord }));
>>     return res.json(rows);
>>   } catch (e) { res.status(500).json({ error: "db_get", detail: e.message }); }
>> });
>>
>> app.post("/api/todos", async (req, res) => {
>>   try {
>>     const text = (req.body?.text || "").toString().trim();
>>     if (!text) return res.status(400).json({ error: "text requerido" });
>>     if (usePg) {
>>       const { rows } = await pool.query(`
>>         INSERT INTO todos (text, done, ord)
>>         VALUES ($1, false, COALESCE((SELECT MAX(ord) FROM todos), 0) + 1)
>>         RETURNING id, text, done, ord
>>       `, [text]);
>>       return res.json(rows[0]);
>>     }
>>     const max = db.prepare("SELECT COALESCE(MAX(ord),0) AS m FROM todos").get().m;
>>     const info = db.prepare("INSERT INTO todos (text, done, ord) VALUES (?, 0, ?)").run(text, max + 1);
>>     return res.json({ id: info.lastInsertRowid, text, done: false, ord: max + 1 });
>>   } catch (e) { res.status(500).json({ error: "db_post", detail: e.message }); }
>> });
>>
>> // Toggle done
>> app.put("/api/todos/:id", async (req, res) => {
>>   try {
>>     const id = Number(req.params.id);
>>     if (usePg) await pool.query("UPDATE todos SET done = NOT done WHERE id = $1", [id]);
>>     else db.prepare("UPDATE todos SET done = CASE WHEN done=1 THEN 0 ELSE 1 END WHERE id = ?").run(id);
>>     res.json({ success: true });
>>   } catch (e) { res.status(500).json({ error: "db_put_toggle", detail: e.message }); }
>> });
>>
>> // Editar texto
>> app.patch("/api/todos/:id", async (req, res) => {
>>   try {
>>     const id = Number(req.params.id);
>>     const text = (req.body?.text || "").toString().trim();
>>     if (!text) return res.status(400).json({ error: "text requerido" });
>>     if (usePg) {
>>       const { rows } = await pool.query("UPDATE todos SET text = $1 WHERE id = $2 RETURNING id, text, done, ord", [text, id]);
>>       if (!rows.length) return res.status(404).json({ error: "not_found" });
>>       return res.json(rows[0]);
>>     } else {
>>       const r = db.prepare("UPDATE todos SET text = ? WHERE id = ?").run(text, id);
>>       if (!r.changes) return res.status(404).json({ error: "not_found" });
>>       const row = db.prepare("SELECT id, text, done, ord FROM todos WHERE id = ?").get(id);
>>       return res.json({ id: row.id, text: row.text, done: !!row.done, ord: row.ord });
>>     }
>>   } catch (e) { res.status(500).json({ error: "db_patch_text", detail: e.message }); }
>> });
>>
>> // Borrar una
>> app.delete("/api/todos/:id", async (req, res) => {
>>   try {
>>     const id = Number(req.params.id);
>>     if (usePg) await pool.query("DELETE FROM todos WHERE id = $1", [id]);
>>     else db.prepare("DELETE FROM todos WHERE id = ?").run(id);
>>     res.json({ success: true });
>>   } catch (e) { res.status(500).json({ error: "db_delete_one", detail: e.message }); }
>> });
>>
>> // Borrar completadas
>> app.delete("/api/todos/completed", async (req, res) => {
>>   try {
>>     if (usePg) await pool.query("DELETE FROM todos WHERE done = TRUE");
>>     else db.prepare("DELETE FROM todos WHERE done = 1").run();
>>     res.json({ success: true });
>>   } catch (e) { res.status(500).json({ error: "db_delete_completed", detail: e.message }); }
>> });
>>
>> // Reordenar (DnD) -> { ids: [id1, id2, ...] } asigna ord = 1..n
>> app.patch("/api/todos/reorder", async (req, res) => {
>>   try {
>>     const ids = Array.isArray(req.body?.ids) ? req.body.ids.map(Number).filter(n => Number.isInteger(n)) : [];
>>     if (!ids.length) return res.status(400).json({ error: "ids requerido" });
>>     if (usePg) {
>>       await pool.query("BEGIN");
>>       for (let i = 0; i < ids.length; i++) {
>>         await pool.query("UPDATE todos SET ord = $1 WHERE id = $2", [i + 1, ids[i]]);
>>       }
>>       await pool.query("COMMIT");
>>     } else {
>>       const tx = db.transaction((list) => {
>>         const upd = db.prepare("UPDATE todos SET ord = ? WHERE id = ?");
>>         list.forEach((id, i) => upd.run(i + 1, id));
>>       });
>>       tx(ids);
>>     }
>>     res.json({ success: true });
>>   } catch (e) {
>>     if (usePg) await pool.query("ROLLBACK").catch(()=>{});
>>     res.status(500).json({ error: "db_reorder", detail: e.message });
>>   }
>> });
>>
>> // ===== FRONTEND: estáticos + caché =====
>> const distPath = path.join(__dirname, "client", "dist");
>> app.use(express.static(distPath, {
>>   maxAge: "1y",
>>   setHeaders: (res, p) => {
>>     if (p.endsWith("index.html")) {
>>       res.setHeader("Cache-Control", "no-cache");
>>     } else if (p.includes(`${path.sep}assets${path.sep}`)) {
>>       res.setHeader("Cache-Control", "public, max-age=31536000, immutable");
>>     }
>>   }
>> }));
>>
>> // Fallback SPA (Express 5)
>> app.use((req, res, next) => {
>>   if (req.method === "GET" && !req.path.startsWith("/api")) {
>>     return res.sendFile(path.join(distPath, "index.html"));
>>   }
>>   next();
>> });
>>
>> const PORT = process.env.PORT || 4000;
>> app.listen(PORT, () =>
>>   console.log(`Servidor único en http://localhost:${PORT} (DB: ${usePg ? "Postgres" : "SQLite"})`)
>> );
>> '@ | Set-Content -Encoding UTF8 $SERVER
PS C:\Users\Leandro\Documents\todo-fullstack>
PS C:\Users\Leandro\Documents\todo-fullstack> # 2) --- FRONTEND: DnD en filtro "Todas" + persistencia ---
PS C:\Users\Leandro\Documents\todo-fullstack> Set-Location $CLIENT
PS C:\Users\Leandro\Documents\todo-fullstack\client> @'
>> import { useState, useEffect, useRef } from "react";
>> import axios from "axios";
>>
>> function useTheme() {
>>   const sysDark = window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches;
>>   const initial = localStorage.getItem("theme") || (sysDark ? "dark" : "light");
>>   const [theme, setTheme] = useState(initial);
>>   useEffect(() => { localStorage.setItem("theme", theme); }, [theme]);
>>   return { theme, setTheme };
>> }
>>
>> function palette(theme) {
>>   const light = { bg:"#fff", fg:"#111", sub:"#333", border:"#ddd", card:"#fff", cardBorder:"#e5e5e5",
>>     inputBg:"#fff", inputBorder:"#ccc", btnBg:"#f2f2f2", btnBorder:"#ccc", btnFg:"#111",
>>     liBg:"#fff", liBorder:"#e5e5e5", todoDone:"#777", todoText:"#111", dangerBg:"#e74c3c",
>>     dangerBorder:"#c0392b", dangerFg:"#fff", link:"#0b57d0" };
>>   const dark  = { bg:"#121212", fg:"#eee", sub:"#c8c8c8", border:"#2a2a2a", card:"#1b1b1b", cardBorder:"#2a2a2a",
>>     inputBg:"#2a2a2a", inputBorder:"#444", btnBg:"#333", btnBorder:"#555", btnFg:"#fff",
>>     liBg:"#202020", liBorder:"#323232", todoDone:"#aaa", todoText:"#fff", dangerBg:"#b43b3b",
>>     dangerBorder:"#7a2b2b", dangerFg:"#fff", link:"#7db7ff" };
>>   return theme === "dark" ? dark : light;
>> }
>>
>> export default function App() {
>>   const { theme, setTheme } = useTheme();
>>   const p = palette(theme);
>>
>>   // ====== CONTACTO ======
>>   const whatsapp = "5493777416857";
>>   const waHref = `https://wa.me/${whatsapp}?text=Hola%20Leandro%2C%20vi%20tu%20CV%20web`;
>>
>>   // ====== CV ======
>>   const cv = {
>>     nombre: "Leandro Maciel",
>>     titular: "Asistente Virtual · Soporte al Cliente · Data Entry",
>>     ubicacion: "Mercedes, Corrientes — Argentina",
>>     email: "leandrotvr@gmail.com",
>>     perfil:
>>       "Docente en Geografía y Ciencias Sociales con experiencia en gestión de grupos y producción de materiales digitales. Orientado a asistencia virtual, soporte al cliente, data entry y redacción. Comunicación clara, organización y aprendizaje continuo.",
>>     competencias: [
>>       "Comunicación clara","Gestión del tiempo","Atención al cliente",
>>       "Redacción y edición","Trabajo remoto","Autonomía","Trabajo en equipo",
>>       "Google Workspace · Microsoft Office · Sheets/Excel · Trello · Notion · Slack · Zoom",
>>     ],
>>     potencial: [
>>       "Asistente Virtual (ES/EN): correo, agenda, coordinación y reportes",
>>       "Customer Support (chat/email)",
>>       "Data Entry / Data Ops en planillas y CRMs",
>>       "QA Manual junior (pruebas funcionales, reporte de bugs)",
>>       "Soporte técnico básico (software y cuentas)",
>>       "Docencia/tutorías online (Geografía y Cs. Sociales)",
>>       "Redacción y estandarización de plantillas/procesos",
>>     ],
>>     proyectos: [{ t: "To-Do List (Live)", url: "https://todo-fullstack-30wd.onrender.com/" }],
>>   };
>>
>>   // ====== TODO LIST ======
>>   const [todos, setTodos] = useState([]);
>>   const [text, setText] = useState("");
>>   const [filtro, setFiltro] = useState("todas"); // todas | pendientes | hechas
>>   const [editingId, setEditingId] = useState(null);
>>   const [editingText, setEditingText] = useState("");
>>   const draggingId = useRef(null);
>>   const inputRef = useRef(null);
>>
>>   useEffect(() => {
>>     axios.get("/api/todos").then(res => setTodos(res.data));
>>   }, []);
>>
>>   const addTodo = () => {
>>     const v = text.trim();
>>     if (!v) return;
>>     axios.post("/api/todos", { text: v }).then(res => {
>>       setTodos(prev => [...prev, res.data]); // se agrega al final (ord = max+1)
>>       setText(""); inputRef.current?.focus();
>>     });
>>   };
>>   const toggleTodo = (id) => {
>>     if (editingId === id) return;
>>     axios.put(`/api/todos/${id}`).then(() => {
>>       setTodos(prev => prev.map(t => t.id === id ? { ...t, done: !t.done } : t));
>>     });
>>   };
>>   const startEdit = (t) => { setEditingId(t.id); setEditingText(t.text); };
>>   const saveEdit = (id) => {
>>     const v = editingText.trim();
>>     if (!v) { cancelEdit(); return; }
>>     axios.patch(`/api/todos/${id}`, { text: v }).then(res => {
>>       const updated = res.data?.text ? res.data : { id, text: v, done: todos.find(x => x.id===id)?.done };
>>       setTodos(prev => prev.map(t => t.id === id ? { ...t, text: updated.text } : t));
>>       setEditingId(null); setEditingText("");
>>     });
>>   };
>>   const onEditKey = (e, id) => { if (e.key==="Enter"){e.preventDefault();saveEdit(id);} if(e.key==="Escape"){e.preventDefault();cancelEdit();} };
>>   const cancelEdit = () => { setEditingId(null); setEditingText(""); };
>>   const deleteTodo = (id) => { axios.delete(`/api/todos/${id}`).then(() => setTodos(prev => prev.filter(t => t.id !== id))); };
>>   const clearCompleted = () => { axios.delete("/api/todos/completed").then(() => setTodos(prev => prev.filter(t => !t.done))); };
>>
>>   // DnD solo en "todas" para evitar reordenes parciales confusos
>>   const canDnD = filtro === "todas";
>>   const onDragStart = (id) => (e) => { draggingId.current = id; e.dataTransfer.effectAllowed = "move"; };
>>   const onDragOver  = (id) => (e) => { if (!canDnD) return; e.preventDefault(); e.dataTransfer.dropEffect = "move"; };
>>   const onDrop      = (id) => async (e) => {
>>     if (!canDnD) return;
>>     e.preventDefault();
>>     const from = draggingId.current;
>>     const to = id;
>>     if (from == null || from === to) return;
>>
>>     // Reordenar en memoria (todos está en orden por 'ord')
>>     setTodos(prev => {
>>       const idxFrom = prev.findIndex(t => t.id === from);
>>       const idxTo   = prev.findIndex(t => t.id === to);
>>       if (idxFrom < 0 || idxTo < 0) return prev;
>>       const clone = prev.slice();
>>       const [moved] = clone.splice(idxFrom, 1);
>>       clone.splice(idxTo, 0, moved);
>>       // Persistir orden en servidor
>>       const ids = clone.map(t => t.id);
>>       axios.patch("/api/todos/reorder", { ids }).catch(()=>{});
>>       return clone;
>>     });
>>   };
>>
>>   // Derivados (lista filtrada para UI)
>>   const total = todos.length;
>>   const hechas = todos.filter(t => t.done).length;
>>   const pendientes = total - hechas;
>>   const filteredTodos = filtro === "hechas" ? todos.filter(t => t.done)
>>                         : filtro === "pendientes" ? todos.filter(t => !t.done)
>>                         : todos;
>>
>>   // UI utils
>>   const copyMarkdown = async () => {
>>     const lines = filteredTodos.map(t => `- [${t.done ? "x" : " "}] ${t.text}`);
>>     const md = lines.join("\n") || "*(lista vacía)*";
>>     try { await navigator.clipboard.writeText(md); alert("Lista (Markdown) copiada."); }
>>     catch { alert("No se pudo copiar."); }
>>   };
>>   const exportJson = () => {
>>     const blob = new Blob([JSON.stringify(todos, null, 2)], { type: "application/json" });
>>     const url = URL.createObjectURL(blob); const a = document.createElement("a");
>>     a.href = url; a.download = "todos.json"; document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url);
>>   };
>>
>>   // Estilos
>>   const s = {
>>     page: { minHeight:"100vh", margin:0, background:p.bg, color:p.fg, fontFamily:"system-ui, sans-serif" },
>>     wrap: { maxWidth:1000, margin:"0 auto", padding:20, display:"grid", gridTemplateColumns:"1fr", gap:16 },
>>     h2: { fontSize:20, margin:"0 0 10px 0", borderBottom:`1px solid ${p.border}`, paddingBottom:6 },
>>     small: { color:p.sub, fontSize:14 },
>>     card: { background:p.card, border:`1px solid ${p.cardBorder}`, borderRadius:14, padding:16 },
>>     row: { display:"flex", gap:8, marginTop:10, marginBottom:10 },
>>     input: { flex:1, padding:"10px 12px", borderRadius:8, border:`1px solid ${p.inputBorder}`, background:p.inputBg, color:p.fg },
>>     btn: { padding:"10px 16px", borderRadius:8, border:`1px solid ${p.btnBorder}`, background:p.btnBg, color:p.btnFg, cursor:"pointer" },
>>     ul: { listStyle:"none", padding:0, margin:0, display:"grid", gap:8 },
>>     li: { display:"flex", alignItems:"center", gap:8, background:p.liBg, border:`1px solid ${p.liBorder}`, borderRadius:10, padding:"10px 12px" },
>>     todoText: done => ({ flex:1, cursor:"pointer", textDecoration: done ? "line-through" : "none", color: done ? p.todoDone : p.todoText }),
>>     del: { padding:"6px 10px", borderRadius:8, border:`1px solid ${p.dangerBorder}`, background:p.dangerBg, color:p.dangerFg, cursor:"pointer" },
>>     banner: { background:p.card, border:`1px solid ${p.cardBorder}`, borderRadius:14, padding:16 },
>>     name: { fontSize:28, fontWeight:800, margin:0 }, sub: { margin:"4px 0 8px 0", color:p.sub }, meta: { margin:0, color:p.sub }, link: { color:p.link, textDecoration:"none" },
>>     grid2: { display:"grid", gridTemplateColumns:"1fr 1fr", gap:16 }, list: { margin:0, paddingLeft:18 },
>>     filters: { display:"flex", gap:8, alignItems:"center", marginTop:4, marginBottom:8 },
>>     tab: (active) => ({ padding:"6px 10px", borderRadius:999, border:`1px solid ${p.inputBorder}`, background: active ? p.fg : p.inputBg, color: active ? p.bg : p.fg, cursor:"pointer" })
>>   };
>>
>>   const toggleTheme = () => setTheme(theme === "dark" ? "light" : "dark");
>>
>>   return (
>>     <div style={s.page}>
>>       <div style={s.wrap}>
>>         {/* ====== TODO LIST ====== */}
>>         <section className="pdf-card" style={s.card}>
>>           <h2 style={s.h2}>Mis tareas (To-Do List)</h2>
>>           <p style={s.small}>
>>             <strong>Hecha con:</strong> React + Vite (frontend), Node.js + Express (backend), Axios, API REST (JSON), CORS.{" "}
>>             <strong>Competencias:</strong> CRUD, hooks, asincronía, validaciones, SPA, build prod, DnD con persistencia (ord).
>>           </p>
>>           <p style={s.small}><strong>Contador:</strong> Total {total} · Pendientes {pendientes} · Hechas {hechas}</p>
>>
>>           <div className="hide-print" style={s.filters}>
>>             <button type="button" style={s.tab(filtro === "todas")} onClick={() => setFiltro("todas")}>Todas</button>
>>             <button type="button" style={s.tab(filtro === "pendientes")} onClick={() => setFiltro("pendientes")}>Pendientes</button>
>>             <button type="button" style={s.tab(filtro === "hechas")} onClick={() => setFiltro("hechas")}>Hechas</button>
>>             <div style={{flex:1}} />
>>             <button type="button" style={s.btn} onClick={copyMarkdown} title="Copiar lista (Markdown)">Copiar (MD)</button>
>>             <button type="button" style={s.btn} onClick={exportJson}   title="Exportar JSON">Exportar JSON</button>
>>             <button type="button" className="hide-print" style={s.btn} onClick={clearCompleted} title="Borrar todas las completadas">Borrar completadas</button>
>>           </div>
>>
>>           <form className="hide-print" onSubmit={(e) => { e.preventDefault(); addTodo(); }} style={s.row}>
>>             <input ref={inputRef} value={text} onChange={e => setText(e.target.value)} placeholder="Nueva tarea..." maxLength={120} style={s.input}/>
>>             <button type="submit" style={s.btn} disabled={!text.trim()}>Agregar</button>
>>           </form>
>>
>>           <ul style={s.ul}>
>>             {filteredTodos.map(t => (
>>               <li key={t.id}
>>                   style={{...s.li, opacity: canDnD ? 1 : 1}}
>>                   draggable={canDnD}
>>                   onDragStart={onDragStart(t.id)}
>>                   onDragOver={onDragOver(t.id)}
>>                   onDrop={onDrop(t.id)}
>>               >
>>                 {editingId === t.id ? (
>>                   <input autoFocus value={editingText} onChange={e=>setEditingText(e.target.value)} onKeyDown={e=>onEditKey(e,t.id)} onBlur={()=>saveEdit(t.id)} style={{...s.input, flex:1}} maxLength={120}/>
>>                 ) : (
>>                   <span className="pdf-task" style={s.todoText(t.done)} onDoubleClick={()=>startEdit(t)} onClick={()=>toggleTodo(t.id)} title={canDnD ? "Arrastrá para reordenar · Doble clic: editar · Clic: completar" : "Doble clic: editar · Clic: completar"}>
>>                     {t.text}
>>                   </span>
>>                 )}
>>                 <button className="hide-print" onClick={()=>startEdit(t)} style={s.btn} title="Editar">Editar</button>
>>                 <button className="hide-print" onClick={()=>deleteTodo(t.id)} style={s.del} title="Eliminar">Eliminar</button>
>>               </li>
>>             ))}
>>           </ul>
>>           {filtro!=="todas" && <p style={s.small}>* El reordenamiento por arrastre está disponible en el filtro “Todas”.</p>}
>>         </section>
>>
>>         {/* ====== BANNER CV ====== */}
>>         <section className="pdf-card" style={s.banner}>
>>           <h1 style={s.name}>{cv.nombre}</h1>
>>           <p style={s.sub}>{cv.titular}</p>
>>           <p style={s.meta}>
>>             📍 {cv.ubicacion}
>>             {" · "}✉ <a href={`mailto:${cv.email}`} style={s.link}>{cv.email}</a>
>>             {" · "}📞 <a href={waHref} style={s.link}>WhatsApp</a>
>>             {" · "}
>>             <button className="hide-print" onClick={() => window.print()} style={{...s.btn, padding:"4px 10px"}} title="Imprimir o guardar como PDF">
>>               Imprimir / Descargar PDF
>>             </button>
>>             {" · "}
>>             <button className="hide-print" onClick={()=>setTheme(theme==="dark"?"light":"dark")} style={{...s.btn, padding:"4px 10px"}} title="Cambiar tema">
>>               Tema: {theme === "dark" ? "Oscuro" : "Claro"}
>>             </button>
>>           </p>
>>
>>           <p style={{marginTop:12}}>{cv.perfil}</p>
>>
>>           <div style={s.grid2}>
>>             <div>
>>               <h2 style={s.h2}>Competencias</h2>
>>               <ul style={s.list}>{cv.competencias.map((c,i)=><li key={i}>{c}</li>)}</ul>
>>             </div>
>>             <div>
>>               <h2 style={s.h2}>Potencial empleable</h2>
>>               <ul style={s.list}>{cv.potencial.map((p,i)=><li key={i}>{p}</li>)}</ul>
>>             </div>
>>           </div>
>>
>>           <div style={{marginTop:10}}>
>>             <h2 style={s.h2}>Proyecto fullstack</h2>
>>             <ul style={s.list}>
>>               {cv.proyectos.map((p,i)=>(<li key={i}><a style={s.link} href={p.url} target="_blank" rel="noreferrer">{p.t}</a></li>))}
>>             </ul>
>>           </div>
>>         </section>
>>       </div>
>>     </div>
>>   );
>> }
>> '@ | Set-Content -Encoding UTF8 $APP
PS C:\Users\Leandro\Documents\todo-fullstack\client>
PS C:\Users\Leandro\Documents\todo-fullstack\client> # 3) --- COMPILAR Y PUBLICAR ---
PS C:\Users\Leandro\Documents\todo-fullstack\client> Set-Location $ROOT
PS C:\Users\Leandro\Documents\todo-fullstack> npm run build

> todo-fullstack@1.0.0 build
> cd client && npm install && npm run build


up to date, audited 176 packages in 2s

39 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities

> client@0.0.0 build
> vite build

vite v7.1.4 building for production...
✓ 79 modules transformed.
dist/index.html                   0.46 kB │ gzip:  0.29 kB
dist/assets/index-CV6lvuN4.css    1.26 kB │ gzip:  0.60 kB
dist/assets/index-CHzpTGag.js   233.15 kB │ gzip: 76.98 kB
✓ built in 3.77s
PS C:\Users\Leandro\Documents\todo-fullstack> git add .
warning: in the working copy of 'client/package-lock.json', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'client/src/App.jsx', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'server.js', LF will be replaced by CRLF the next time Git touches it
PS C:\Users\Leandro\Documents\todo-fullstack> git commit -m "feat: drag & drop con orden persistente (columna ord) + endpoint /api/todos/reorder" 2>$null
[main 8bb835d] feat: drag & drop con orden persistente (columna ord) + endpoint /api/todos/reorder
 3 files changed, 720 insertions(+), 336 deletions(-)
PS C:\Users\Leandro\Documents\todo-fullstack> git push -u origin main
Enumerating objects: 13, done.
Counting objects: 100% (13/13), done.
Delta compression using up to 2 threads
Compressing objects: 100% (7/7), done.
Writing objects: 100% (7/7), 8.97 KiB | 1.28 MiB/s, done.
Total 7 (delta 5), reused 0 (delta 0), pack-reused 0 (from 0)
remote: Resolving deltas: 100% (5/5), completed with 5 local objects.
To https://github.com/Leandrotvr/todo-fullstack
   683bda6..8bb835d  main -> main
branch 'main' set up to track 'origin/main'.
PS C:\Users\Leandro\Documents\todo-fullstack> # === RUTAS ===
PS C:\Users\Leandro\Documents\todo-fullstack> $ROOT   = "C:\Users\Leandro\Documents\todo-fullstack"
PS C:\Users\Leandro\Documents\todo-fullstack> $CLIENT = Join-Path $ROOT "client"
PS C:\Users\Leandro\Documents\todo-fullstack> $PUBLIC = Join-Path $CLIENT "public"
PS C:\Users\Leandro\Documents\todo-fullstack> $INDEX  = Join-Path $CLIENT "index.html"
PS C:\Users\Leandro\Documents\todo-fullstack>
PS C:\Users\Leandro\Documents\todo-fullstack> $SITE   = "https://todo-fullstack-30wd.onrender.com"
PS C:\Users\Leandro\Documents\todo-fullstack> $TITLE  = "Leandro Maciel – To-Do & CV"
PS C:\Users\Leandro\Documents\todo-fullstack> $DESC   = "To-Do List + CV online. Proyecto fullstack (React+Vite, Node+Express, API REST, DB). Contacto: leandrotvr@gmail.com · WhatsApp."
PS C:\Users\Leandro\Documents\todo-fullstack>
PS C:\Users\Leandro\Documents\todo-fullstack> # 1) Ir al frontend y asegurar /public
PS C:\Users\Leandro\Documents\todo-fullstack> Set-Location $CLIENT
PS C:\Users\Leandro\Documents\todo-fullstack\client> New-Item -ItemType Directory -Force -Path $PUBLIC | Out-Null
PS C:\Users\Leandro\Documents\todo-fullstack\client>
PS C:\Users\Leandro\Documents\todo-fullstack\client> # 2) Reescribir index.html con metadatos SEO/OG/Twitter + print básico
PS C:\Users\Leandro\Documents\todo-fullstack\client> @"
>> <!doctype html>
>> <html lang="es">
>>   <head>
>>     <meta charset="UTF-8" />
>>     <meta name="viewport" content="width=device-width,initial-scale=1" />
>>     <title>$TITLE</title>
>>
>>     <!-- Canonical -->
>>     <link rel="canonical" href="$SITE" />
>>
>>     <!-- Descripción -->
>>     <meta name="description" content="$DESC" />
>>     <meta name="theme-color" content="#121212" />
>>
>>     <!-- Open Graph -->
>>     <meta property="og:type" content="website" />
>>     <meta property="og:site_name" content="Leandro Maciel" />
>>     <meta property="og:url" content="$SITE" />
>>     <meta property="og:title" content="$TITLE" />
>>     <meta property="og:description" content="$DESC" />
>>
>>     <!-- Twitter -->
>>     <meta name="twitter:card" content="summary" />
>>     <meta name="twitter:title" content="$TITLE" />
>>     <meta name="twitter:description" content="$DESC" />
>>
>>     <!-- Print helpers: ocultar controles con .hide-print -->
>>     <style>
>>       @media print {
>>         .hide-print { display: none !important; }
>>       }
>>     </style>
>>   </head>
>>   <body>
>>     <div id="root"></div>
>>     <script type="module" src="/src/main.jsx"></script>
>>
>>     <!-- Datos estructurados (JSON-LD) -->
>>     <script type="application/ld+json">
>>     {
>>       "@context": "https://schema.org",
>>       "@type": "Person",
>>       "name": "Leandro Maciel",
>>       "jobTitle": "Asistente Virtual / Soporte al Cliente / Data Entry",
>>       "email": "mailto:leandrotvr@gmail.com",
>>       "address": { "@type": "PostalAddress", "addressCountry": "AR", "addressLocality": "Mercedes, Corrientes" },
>>       "url": "$SITE",
>>       "sameAs": ["https://wa.me/5493777416857"]
>>     }
>>     </script>
>>   </body>
>> </html>
>> "@ | Set-Content -Encoding UTF8 $INDEX
PS C:\Users\Leandro\Documents\todo-fullstack\client>
PS C:\Users\Leandro\Documents\todo-fullstack\client> # 3) robots.txt y sitemap.xml en /public (Vite los copia a la raíz del build)
PS C:\Users\Leandro\Documents\todo-fullstack\client> @"
>> User-agent: *
>> Allow: /
>> Sitemap: $SITE/sitemap.xml
>> "@ | Set-Content -Encoding UTF8 (Join-Path $PUBLIC "robots.txt")
PS C:\Users\Leandro\Documents\todo-fullstack\client>
PS C:\Users\Leandro\Documents\todo-fullstack\client> @"
>> <?xml version="1.0" encoding="UTF-8"?>
>> <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
>>   <url>
>>     <loc>$SITE/</loc>
>>     <changefreq>weekly</changefreq>
>>     <priority>1.0</priority>
>>   </url>
>> </urlset>
>> "@ | Set-Content -Encoding UTF8 (Join-Path $PUBLIC "sitemap.xml")
PS C:\Users\Leandro\Documents\todo-fullstack\client>
PS C:\Users\Leandro\Documents\todo-fullstack\client> # 4) Volver a raíz, compilar y push
PS C:\Users\Leandro\Documents\todo-fullstack\client> Set-Location $ROOT
PS C:\Users\Leandro\Documents\todo-fullstack> npm run build

> todo-fullstack@1.0.0 build
> cd client && npm install && npm run build


up to date, audited 176 packages in 2s

39 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities

> client@0.0.0 build
> vite build

vite v7.1.4 building for production...
✓ 80 modules transformed.
dist/index.html                   2.27 kB │ gzip:  0.90 kB
dist/assets/index-CV6lvuN4.css    1.26 kB │ gzip:  0.60 kB
dist/assets/index-CHzpTGag.js   233.15 kB │ gzip: 76.98 kB
✓ built in 3.69s
PS C:\Users\Leandro\Documents\todo-fullstack> git add .
warning: in the working copy of 'client/index.html', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'client/package-lock.json', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'client/public/robots.txt', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'client/public/sitemap.xml', LF will be replaced by CRLF the next time Git touches it
PS C:\Users\Leandro\Documents\todo-fullstack> git commit -m "chore(seo): meta tags OG/Twitter, canonical, robots.txt y sitemap.xml" 2>$null
[main 3341be8] chore(seo): meta tags OG/Twitter, canonical, robots.txt y sitemap.xml
 4 files changed, 594 insertions(+), 5 deletions(-)
 create mode 100644 client/public/robots.txt
 create mode 100644 client/public/sitemap.xml
PS C:\Users\Leandro\Documents\todo-fullstack> git push -u origin main
Enumerating objects: 13, done.
Counting objects: 100% (13/13), done.
Delta compression using up to 2 threads
Compressing objects: 100% (8/8), done.
Writing objects: 100% (8/8), 11.84 KiB | 1.69 MiB/s, done.
Total 8 (delta 2), reused 0 (delta 0), pack-reused 0 (from 0)
remote: Resolving deltas: 100% (2/2), completed with 2 local objects.
To https://github.com/Leandrotvr/todo-fullstack
   8bb835d..3341be8  main -> main
branch 'main' set up to track 'origin/main'.
PS C:\Users\Leandro\Documents\todo-fullstack>
