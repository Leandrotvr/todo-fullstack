Windows PowerShell
Copyright (C) Microsoft Corporation. Todos los derechos reservados.

Instale la versión más reciente de PowerShell para obtener nuevas características y mejoras. https://aka.ms/PSWindows

PS C:\Users\Leandro> # === RUTAS ===
PS C:\Users\Leandro> $ROOT   = "C:\Users\Leandro\Documents\todo-fullstack"
PS C:\Users\Leandro> $CLIENT = Join-Path $ROOT "client"
PS C:\Users\Leandro> $APP    = Join-Path $CLIENT "src\App.jsx"
PS C:\Users\Leandro>
PS C:\Users\Leandro> # 1) Ir al frontend
PS C:\Users\Leandro> Set-Location $CLIENT
PS C:\Users\Leandro\Documents\todo-fullstack\client>
PS C:\Users\Leandro\Documents\todo-fullstack\client> # 2) Reescribir App.jsx con filtros + contador (mantiene impresión a PDF y CV)
PS C:\Users\Leandro\Documents\todo-fullstack\client> @'
>> import { useState, useEffect, useRef } from "react";
>> import axios from "axios";
>>
>> export default function App() {
>>   // ====== CONTACTO ======
>>   const whatsapp = "5493777416857";
>>   const waHref = `https://wa.me/${whatsapp}?text=Hola%20Leandro%2C%20vi%20tu%20CV%20web`;
>>
>>   // ====== DATOS CV ======
>>   const cv = {
>>     nombre: "Leandro Maciel",
>>     titular: "Asistente Virtual · Soporte al Cliente · Data Entry",
>>     ubicacion: "Mercedes, Corrientes — Argentina",
>>     email: "leandrotvr@gmail.com",
>>     perfil:
>>       "Docente en Geografía y Ciencias Sociales con experiencia en gestión de grupos y producción de materiales digitales. Orientado a asistencia virtual, soporte al cliente, data entry y redacción. Comunicación clara, organización y aprendizaje continuo.",
>>     competencias: [
>>       "Comunicación clara","Gestión del tiempo","Atención al cliente",
>>       "Redacción y edición","Trabajo remoto","Autonomía","Trabajo en equipo",
>>       "Google Workspace · Microsoft Office · Sheets/Excel · Trello · Notion · Slack · Zoom",
>>     ],
>>     potencial: [
>>       "Asistente Virtual (ES/EN): correo, agenda, coordinación y reportes",
>>       "Customer Support (chat/email)",
>>       "Data Entry / Data Ops en planillas y CRMs",
>>       "QA Manual junior (pruebas funcionales, reporte de bugs)",
>>       "Soporte técnico básico (software y cuentas)",
>>       "Docencia/tutorías online (Geografía y Cs. Sociales)",
>>       "Redacción y estandarización de plantillas/procesos",
>>     ],
>>     proyectos: [{ t: "To-Do List (Live)", url: "https://todo-fullstack-30wd.onrender.com/" }],
>>   };
>>
>>   // ====== TODO LIST ======
>>   const [todos, setTodos] = useState([]);
>>   const [text, setText] = useState("");
>>   const [filtro, setFiltro] = useState("todas"); // todas | pendientes | hechas
>>   const inputRef = useRef(null);
>>
>>   useEffect(() => {
>>     axios.get("/api/todos").then(res => setTodos(res.data));
>>   }, []);
>>
>>   const addTodo = () => {
>>     const v = text.trim();
>>     if (!v) return;
>>     axios.post("/api/todos", { text: v }).then(res => {
>>       setTodos(prev => [...prev, res.data]);
>>       setText("");
>>       inputRef.current?.focus();
>>     });
>>   };
>>   const toggleTodo = (id) => {
>>     axios.put(`/api/todos/${id}`).then(() => {
>>       setTodos(prev => prev.map(t => t.id === id ? { ...t, done: !t.done } : t));
>>     });
>>   };
>>   const deleteTodo = (id) => {
>>     axios.delete(`/api/todos/${id}`).then(() => {
>>       setTodos(prev => prev.filter(t => t.id !== id));
>>     });
>>   };
>>
>>   // Derivados para contador + filtrado
>>   const total = todos.length;
>>   const hechas = todos.filter(t => t.done).length;
>>   const pendientes = total - hechas;
>>   const filteredTodos = filtro === "hechas"
>>     ? todos.filter(t => t.done)
>>     : filtro === "pendientes"
>>       ? todos.filter(t => !t.done)
>>       : todos;
>>
>>   // ====== ESTILOS (UI; impresión se maneja con @media print en index.css) ======
>>   const s = {
>>     page: { minHeight: "100vh", margin: 0, background: "#121212", color: "#eee", fontFamily: "system-ui, sans-serif" },
>>     wrap: { maxWidth: 1000, margin: "0 auto", padding: 20, display: "grid", gridTemplateColumns: "1fr", gap: 16 },
>>
>>     h2: { fontSize: 20, margin: "0 0 10px 0", borderBottom: "1px solid #2a2a2a", paddingBottom: 6 },
>>     small: { color: "#aaa", fontSize: 14 },
>>
>>     card: { background: "#1b1b1b", border: "1px solid #2a2a2a", borderRadius: 14, padding: 16 },
>>     row: { display: "flex", gap: 8, marginTop: 10, marginBottom: 10 },
>>     input: { flex: 1, padding: "10px 12px", borderRadius: 8, border: "1px solid #444", background: "#2a2a2a", color: "#eee" },
>>     btn: { padding: "10px 16px", borderRadius: 8, border: "1px solid #555", background: "#333", color: "#fff", cursor: "pointer" },
>>
>>     ul: { listStyle: "none", padding: 0, margin: 0, display: "grid", gap: 8 },
>>     li: { display: "flex", alignItems: "center", gap: 8, background: "#202020", border: "1px solid #323232", borderRadius: 10, padding: "10px 12px" },
>>     todoText: done => ({ flex: 1, cursor: "pointer", textDecoration: done ? "line-through" : "none", color: done ? "#aaa" : "#fff" }),
>>     del: { padding: "6px 10px", borderRadius: 8, border: "1px solid #7a2b2b", background: "#b43b3b", color: "#fff", cursor: "pointer" },
>>
>>     banner: { background: "#1b1b1b", border: "1px solid #2a2a2a", borderRadius: 14, padding: 16 },
>>     name: { fontSize: 28, fontWeight: 800, margin: 0 },
>>     sub: { margin: "4px 0 8px 0", color: "#c8c8c8" },
>>     meta: { margin: 0, color: "#bdbdbd" },
>>     link: { color: "#7db7ff", textDecoration: "none" },
>>
>>     grid2: { display: "grid", gridTemplateColumns: "1fr 1fr", gap: 16 },
>>     list: { margin: 0, paddingLeft: 18 },
>>
>>     filters: { display: "flex", gap: 8, alignItems: "center", marginTop: 4, marginBottom: 8 },
>>     tab: (active) => ({
>>       padding: "6px 10px",
>>       borderRadius: 999,
>>       border: "1px solid #444",
>>       background: active ? "#fff" : "#2a2a2a",
>>       color: active ? "#000" : "#eee",
>>       cursor: "pointer"
>>     })
>>   };
>>
>>   return (
>>     <div style={s.page}>
>>       <div style={s.wrap}>
>>         {/* ====== TODO LIST PRIMERO ====== */}
>>         <section className="pdf-card" style={s.card}>
>>           <h2 style={s.h2}>Mis tareas (To-Do List)</h2>
>>           <p style={s.small}>
>>             <strong>Hecha con:</strong> React + Vite (frontend), Node.js + Express (backend), Axios, API REST (JSON), CORS.{" "}
>>             <strong>Competencias:</strong> CRUD, hooks (useState/useEffect/useRef), asincronía (promesas), validaciones básicas, SPA y build de producción.
>>           </p>
>>
>>           {/* Contador */}
>>           <p style={s.small}><strong>Contador:</strong> Total {total} · Pendientes {pendientes} · Hechas {hechas}</p>
>>
>>           {/* Filtros (ocultos en impresión) */}
>>           <div className="hide-print" style={s.filters}>
>>             <button type="button" style={s.tab(filtro === "todas")} onClick={() => setFiltro("todas")}>Todas</button>
>>             <button type="button" style={s.tab(filtro === "pendientes")} onClick={() => setFiltro("pendientes")}>Pendientes</button>
>>             <button type="button" style={s.tab(filtro === "hechas")} onClick={() => setFiltro("hechas")}>Hechas</button>
>>           </div>
>>
>>           {/* Formulario (oculto en impresión) */}
>>           <form className="hide-print" onSubmit={(e) => { e.preventDefault(); addTodo(); }} style={s.row}>
>>             <input
>>               ref={inputRef}
>>               value={text}
>>               onChange={e => setText(e.target.value)}
>>               placeholder="Nueva tarea..."
>>               maxLength={120}
>>               style={s.input}
>>             />
>>             <button type="submit" style={s.btn} disabled={!text.trim()}>
>>               Agregar
>>             </button>
>>           </form>
>>
>>           {/* Lista filtrada */}
>>           <ul style={s.ul}>
>>             {filteredTodos.map(t => (
>>               <li key={t.id} style={s.li}>
>>                 <span
>>                   className="pdf-task"
>>                   style={s.todoText(t.done)}
>>                   onClick={() => toggleTodo(t.id)}
>>                   title="Marcar / desmarcar"
>>                 >
>>                   {t.text}
>>                 </span>
>>                 <button className="hide-print" onClick={() => deleteTodo(t.id)} style={s.del} title="Eliminar">
>>                   Eliminar
>>                 </button>
>>               </li>
>>             ))}
>>           </ul>
>>         </section>
>>
>>         {/* ====== BANNER CV ====== */}
>>         <section className="pdf-card" style={s.banner}>
>>           <h1 style={s.name}>{cv.nombre}</h1>
>>           <p style={s.sub}>{cv.titular}</p>
>>           <p style={s.meta}>
>>             📍 {cv.ubicacion}
>>             {" · "}✉ <a href={`mailto:${cv.email}`} style={s.link}>{cv.email}</a>
>>             {" · "}📞 <a href={waHref} style={s.link}>WhatsApp</a>
>>             {" · "}
>>             <button className="hide-print" onClick={() => window.print()} style={{...s.btn, padding: "4px 10px"}} title="Imprimir o guardar como PDF">
>>               Imprimir / Descargar PDF
>>             </button>
>>           </p>
>>
>>           <p style={{marginTop: 12}}>{cv.perfil}</p>
>>
>>           <div style={s.grid2}>
>>             <div>
>>               <h2 style={s.h2}>Competencias</h2>
>>               <ul style={s.list}>
>>                 {cv.competencias.map((c, i) => <li key={i}>{c}</li>)}
>>               </ul>
>>             </div>
>>             <div>
>>               <h2 style={s.h2}>Potencial empleable</h2>
>>               <ul style={s.list}>
>>                 {cv.potencial.map((p, i) => <li key={i}>{p}</li>)}
>>               </ul>
>>             </div>
>>           </div>
>>
>>           <div style={{marginTop: 10}}>
>>             <h2 style={s.h2}>Proyecto fullstack</h2>
>>             <ul style={s.list}>
>>               {cv.proyectos.map((p, i) => (
>>                 <li key={i}><a style={s.link} href={p.url} target="_blank" rel="noreferrer">{p.t}</a></li>
>>               ))}
>>             </ul>
>>           </div>
>>         </section>
>>       </div>
>>     </div>
>>   );
>> }
>> '@ | Set-Content -Encoding UTF8 $APP
PS C:\Users\Leandro\Documents\todo-fullstack\client>
PS C:\Users\Leandro\Documents\todo-fullstack\client> # 3) Volver a la raíz, compilar y push (Render autodeploy)
PS C:\Users\Leandro\Documents\todo-fullstack\client> Set-Location $ROOT
PS C:\Users\Leandro\Documents\todo-fullstack> npm run build

> todo-fullstack@1.0.0 build
> cd client && npm install && npm run build


up to date, audited 176 packages in 2s

39 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities

> client@0.0.0 build
> vite build

vite v7.1.4 building for production...
✓ 79 modules transformed.
dist/index.html                   0.46 kB │ gzip:  0.29 kB
dist/assets/index-CV6lvuN4.css    1.26 kB │ gzip:  0.60 kB
dist/assets/index-TMJlo85b.js   229.62 kB │ gzip: 75.65 kB
✓ built in 3.64s
PS C:\Users\Leandro\Documents\todo-fullstack> git add .
warning: in the working copy of 'client/package-lock.json', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'client/src/App.jsx', LF will be replaced by CRLF the next time Git touches it
PS C:\Users\Leandro\Documents\todo-fullstack> git commit -m "feat: filtros (Todas/Pendientes/Hechas) + contador en To-Do" 2>$null
[main d53b76f] feat: filtros (Todas/Pendientes/Hechas) + contador en To-Do
 2 files changed, 345 insertions(+), 498 deletions(-)
PS C:\Users\Leandro\Documents\todo-fullstack> git push -u origin main
Enumerating objects: 11, done.
Counting objects: 100% (11/11), done.
Delta compression using up to 2 threads
Compressing objects: 100% (6/6), done.
Writing objects: 100% (6/6), 4.04 KiB | 690.00 KiB/s, done.
Total 6 (delta 4), reused 0 (delta 0), pack-reused 0 (from 0)
remote: Resolving deltas: 100% (4/4), completed with 4 local objects.
To https://github.com/Leandrotvr/todo-fullstack
   df46d33..d53b76f  main -> main
branch 'main' set up to track 'origin/main'.
PS C:\Users\Leandro\Documents\todo-fullstack>